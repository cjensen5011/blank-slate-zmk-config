/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define LOWER 1
#define RAISE 2
#define ADJUST 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&soft_off {
  compatible = "zmk,soft-off";
  label = "Soft Off";
  bindings = <&kp LEFT &kp RIGHT &kp UP &kp DOWN>;
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
          #ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
          #elif defined(TBLE_MIT)
                       &mit_transform;
          #else
                       &ortho_transform;
          #endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		      wait-ms = <1>;
		      tap-ms = <5>;
          bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		  )
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		    compatible = "zmk,behavior-tap-dance";
		    label = "TD_SHIFTY";
		    #binding-cells = <0>;
		    tapping-term-ms = <150>;
		    bindings = <&kp LSHFT>, <&caps_word>;
	    };
    };


// Conditional layer only when we have less thumb keys
    cond_layers {
        compatible = "zmk,conditional-layers";
	      tri {
	        if-layers = <RAISE LOWER>;
	        then-layer = <ADJUST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp TAB    &kp Q      &kp W     &kp E      &kp R      &kp T      &kp Y      &kp U      &kp I      &kp O     &kp P     &kp BKSP
 &kp LCTRL  &kp A      &kp S     &kp D      &kp F      &kp G      &kp H      &kp J      &kp K      &kp L     &kp SEMI  &kp QUOT
 &kp LSHFT  &kp Z      &kp X     &kp C      &kp V      &kp B      &kp N      &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp RET
 &kp ESC    &kp LCTRL  &kp LALT  &kp LGUI   &mo LOWER  &kp SPACE  &kp SPACE  &mo RAISE  &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT
            >;
        };

        nav_layer {
            label = "Lower";
            bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR   &kp BKSP
&kp DEL    &trans    &trans  &trans    &trans    &trans     &trans     &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC   &kp PIPE 
&trans     &trans    &trans  &trans    &trans    &trans     &trans     &trans     &trans     &kp PG_DN  &kp PG_UP  &trans
&trans     &trans    &trans  &trans    &trans    &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        num_layer {
            label = "Raise";
            bindings = <
&kp GRAVE  &kp N1   &kp N2   &kp N3   &kp N4   &kp N5   &kp N6   &kp N7     &kp N8    &kp N9    &kp N0    &trans
&kp DEL    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &kp F6   &kp MINUS  &kp EQUAL &kp LBKT  &kp RBKT  &kp BSLH 
&kp LSHFT  &kp F7   &kp F8   &kp F9   &kp F10  &kp F11  &kp F12  &kp NUHS   &kp NUBS  &kp HOME  &kp END   &trans
&trans     &trans   &trans   &trans   &trans   &trans   &trans   &trans     &trans    &trans    &trans    &trans
            >;
        };

        sym_layer {
            label = "Adjust";
            bindings = <
&bt BT_CLR  &bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)  &trans  &trans  &trans  &trans  &trans      &bootloader
&trans      &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans      &trans
&trans      &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &sys_reset  &trans
&trans      &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans      &trans
            >;
        };


    };
};

